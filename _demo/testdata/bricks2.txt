        ALICE'S ADVENTURES IN WONDERLAND                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                         
                  Lewis Carroll                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                         
       THE MILLENNIUM FULCRUM EDITION 2.9                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                    CHAPTER I                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                         
              Down the Rabbit-Hole                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                         
            *	*	*	*	*	*	*                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                         
            *	*	*	*	*	*                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                         
            *	*	*	*	*	*	*                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                         
  ___   _      ___   _      ___   _      ___   _      ___   _                                                                                                                                                                                                            
 [(_)] |=|    [(_)] |=|    [(_)] |-|    [(_)] |=|    [(_)] |-|                                                                                                                                                                                                           
  '-`  |_|     '-`  |_|     '-`  |_|     '-`  |_|     '-`  |_|                                                                                                                                                                                                           
 /mnm/  /     /mmm/  /     /mnm/  /     /mmm/  /     /mbm/  /                                                                                                                                                                                                            
       |____________|_____________|____________|____________|                                                                                                                                                                                                            
                             |            |            |                                                                                                                                                                                                                 
         ,___           ___  \_      ___  \_      ___  \_                                                                                                                                                                                                                
      `\/{o,o}         [(_)] |=|    [(_)] |-|    [(_)] |=|                                                                                                                                                                                                               
       / /)  )          '-`  |_|     '-`  |_|     '-`  |_|                                                                                                                                                                                                               
      /,--"-"-         /mnm/        /mnm/        /mnm/                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                         
  Alice was beginning to get very tired of sitting by her sister           So she was considering in her own mind (as well as she could,                                                                                                                                 
on the bank, and of having nothing to do:  once or twice she had         for the hot day made her feel very sleepy and stupid), whether                                                                                                                                  
peeped into the book her sister was reading, but it had no               the pleasure of making a daisy-chain would be worth the trouble                                                                                                                                 
pictures or conversations in it, `and what is the use of a book,'        of getting up and picking the daisies, when suddenly a White                                                                                                                                    
thought Alice `without pictures or conversation?'                        Rabbit with pink eyes ran close by her.                                                                                                                                                         
                                                                                                                                                                                                                                                                         
   ┌───────────────────┬─────────────────────────┐                                 ---=---+---=---                                                                                                                                                                       
   │Architecture       │                         │                                        \___                                                                                                                                                                            
   ├───────────────────┼─────────────────────────┤                                  ----=---+-I-=----                                                                                                                                                                    
   │ ~~~~~~~~~~~~~~~~~ │ ----------------------- │      	!                                          |\                                                                                                                                                                
   ├───────────────────┼─────────────────────────┤       	"                                    ----=----+----=----                                                                                                                                                     
   │  I write,         │  erase, rewrite         │        	§                                          |                                                                                                                                                                 
   ├───────────────────┼─────────────────────────┤         	$                                          ^                                                                                                                                                                 
   │  Erase again,     │  and then               │          	%                                                                                                                                                                                                        
   ├───────────────────┼─────────────────────────┤           	&       -blank blank tab char * 5-                                                                                                                                                                       
   │  A poppy blooms.  │                         │            	/         	a  	b  	c  	d  	e                                                                                                                                                                            
   ├───────────────────┼─────────────────────────┤             	(                                                                                                                                                                                                        
   │  *             *  │  +                   +  │      -tab blank char tab * 3-                                                                                                                                                                                         
   ├───────────────────┼─────────────────────────┤      	 9		 8		 7                                                                                                                                                                                           
   │         µ         │        ↑       ↓        │                                                                                                                                                                                                                       
   └───────────────────┴─────────────────────────┘                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                         
                      +     /\        *                    -tab blank tab char * 2-                                                                                                                                                                                      
                 '        /   |                            	 	<	 	>                                                                                                                                                                                                
            .            / /| | .                                                                                                                                                                                                                                        
                  *   .,--,. /                             -tab char * 5-                                                                                                                                                                                                
                     /      /|                             	v	w	x	y	z                                                                                                                                                                                            
              ,      \ ,   / /    ´                                                                                                                                                                                                                                      
                     /\_../-'                                                                                                                                                                                                                                            
           *      , / |/ /         *                                                                                                                                                                                                                                     
                   /    / o                                ^31943                                                                                                                                                                                                        
              .    /  /             .                                                                                                                                                                                                                                    
                   '''     +                                                                                                                                                                                                                                             
                *               *                                                          |                                                                                                                                                                             
                                                                                         \|/|/                                                                                                                                                                           
                                                                                       \|\\|//|/                                                                                                                                                                         
                                                                                        \|\|/|/                                                                                                                                                                          
                                                                                         \\|//                                                                                                                                                                           
                                                                                          \|/                                                                                                                                                                            
                                                                                          \|/                                                                                                                                                                            
                                                                                           |                                                                                                                                                                             
                                                                                     _\|/__|_\|/____\|/__                                                                                                                                                                
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
def open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True): # known special case of open                     eval                                                                                                                  
    """                                                                                                                                            ####                                                                                                                  
    Open file and return a stream.  Raise OSError upon failure.                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                         
    file is either a text or byte string giving the name (and the path                                                                             eval.\ :html:`<a id=#eval><strong>Eval</strong></a>`\ (*x*) -> Char | Key | Mouse | Reply | Type[Char | Key | Mouse |  Reply] :html:`<a href="!¶/wiki/eval#user-content-#eval">¶</a>`
    if the file isn't in the current working directory) of the file to                                                                                                                                                                                                   
    be opened or an integer file descriptor of the file to be                                                                                          The central Eval function.                                                                                        
    wrapped. (If a file descriptor is given, it is closed when the                                                                                     Returns the input type or the object from a representational string.                                              
    returned I/O object is closed, unless closefd is set to False.)                                                                                                                                                                                                      
                                                                                                                                                       :raises:                                                                                                          
    mode is an optional string that specifies the mode in which the file                                                                                   - ValueError if the repr-string cannot be associated.                                                         
    is opened. It defaults to 'r' which means open for reading in text                                                                                                                                                                                                   
    mode.  Other common values are 'w' for writing (truncating the file if                                                                                                                                                                                               
    it already exists), 'x' for creating and writing to a new file, and                                                                                                                                                                                                  
    'a' for appending (which on some Unix systems, means that all writes                                                                           *class* eval.\ :html:`<a id=#basickeycomp><strong>BasicKeyComp</strong></a>` :html:`<a href="!¶/wiki/eval#user-conten t-#basickeycomp">¶</a>`
    append to the end of the file regardless of the current seek position).                                                                                                                                                                                              
    In text mode, if encoding is not specified the encoding used is platform                                                                           *class* eval.\ :html:`<a id=#basickeycomp-navkeys><strong>NavKeys</strong></a>` :html:`<a href="!¶/wiki/eval#user -content-#basickeycomp-navkeys">¶</a>`
    dependent: locale.getpreferredencoding(False) is called to get the                                                                                 |< abslen=43324                                                                                                   
    current locale encoding. (For reading and writing raw bytes use binary                                                                                                                                                                                               
    mode and leave encoding unspecified.) The available modes are:                                                                                 class RGBTablesPrism:                                                                                                 
                                                                                                                                                       """                                                                                                               
    ========= ===============================================================                                                                          Static methods:                                                                                                   
    Character Meaning                                                                                                                                      - create_rgb_row                                                                                              
    --------- ---------------------------------------------------------------                                                                              - rgb_from_row                                                                                                
    'r'       open for reading (default)                                                                                                                   - Prism.[...]                                                                                                 
    'w'       open for writing, truncating the file first                                                                                              """                                                                                                               
    'x'       create a new file and open it for writing                                                                                                class Prism:                                                                                                      
    'a'       open for writing, appending to the end of the file if it exists                                                                                                                                                                                            
    'b'       binary mode                                                                                                                                  @staticmethod                                                                                                 
    't'       text mode (default)                                                                                                                          def gray(r: int, g: int, b: int) -> bool: return r == g == b                                                  
    '+'       open a disk file for updating (reading and writing)                                                                                                                                                                                                        
    'U'       universal newline mode (deprecated)                                                                                                          @staticmethod                                                                                                 
    ========= ===============================================================                                                                              def light(r: int, g: int, b: int) -> bool: return r > 200 and g > 200 and b > 200                             
                                                                                                                                                                                                                                                                         
    The default mode is 'rt' (open for reading text). For binary random                                                                                    @staticmethod                                                                                                 
    access, the mode 'w+b' opens and truncates the file to 0 bytes, while                                                                                  def dark(r: int, g: int, b: int) -> bool: return r < 200 and g < 200 and b < 200                              
    'r+b' opens the file without truncation. The 'x' mode implies 'w' and                                                                                                                                                                                                
    raises an `FileExistsError` if the file already exists.                                                                                                @staticmethod                                                                                                 
                                                                                                                                                           def red(r: int, g: int, b: int) -> bool: return r > g and r > b                                               
    Python distinguishes between files opened in binary and text modes,                                                                                                                                                                                                  
    even when the underlying operating system doesn't. Files opened in                                                                                     @staticmethod                                                                                                 
    binary mode (appending 'b' to the mode argument) return contents as                                                                                    def green(r: int, g: int, b: int) -> bool: return g > r and g > b                                             
    bytes objects without any decoding. In text mode (the default, or when                                                                                                                                                                                               
    't' is appended to the mode argument), the contents of the file are                                                                                    @staticmethod                                                                                                 
    returned as strings, the bytes having been first decoded using a                                                                                       def blue(r: int, g: int, b: int) -> bool: return b > g and b > r                                              
    platform-dependent encoding or using the specified encoding if given.                                                                                                                                                                                                
                                                                                                                                                           @staticmethod                                                                                                 
    'U' mode is deprecated and will raise an exception in future versions                                                                                  def cyan(r: int, g: int, b: int) -> bool: return (g == b and r < g) or (b > 100 and g > 100 and r < 32)       
    of Python.  It has no effect in Python 3.  Use newline to control                                                                                                                                                                                                    
    universal newlines mode.                                                                                                                               @staticmethod                                                                                                 
                                                                                                                                                           def yellow(r: int, g: int, b: int) -> bool: return (r == g and b < r) or (r > 100 and g > 100 and b < 32)     
    buffering is an optional integer used to set the buffering policy.                                                                                                                                                                                                   
    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select                                                                              @staticmethod                                                                                                 
    line buffering (only usable in text mode), and an integer > 1 to indicate                                                                              def magenta(r: int, g: int, b: int) -> bool: return (r == b and g < r) or (r > 100 and b > 100 and g < 32)    
    the size of a fixed-size chunk buffer.  When no buffering argument is                                                                                                                                                                                                
    given, the default buffering policy works as follows:                                                                                              pallet_folder: str                                                                                                
                                                                                                                                                       src_file: str | None                                                                                              
    * Binary files are buffered in fixed-size chunks; the size of the buffer                                                                                                                                                                                             
      is chosen using a heuristic trying to determine the underlying device's                                                                          def __init__(self, pallet_folder: str, src_file: str = None):                                                     
      "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.                                                                                           """Processing of rgb tables."""                                                                               
      On many systems, the buffer will typically be 4096 or 8192 bytes long.                                                                               self.pallet_folder = pallet_folder                                                                            
                                                                                                                                                           self.src_file = src_file                                                                                      
    * "Interactive" text files (files for which isatty() returns True)                                                                                                                                                                                                   
      use line buffering.  Other text files use the policy described above                                                                             def _get_spectra_file_func(self) -> dict[str, tuple[str], Callable[[int, int, int], bool]]:                       
      for binary files.                                                                                                                                    """Composes an index from the attributes in Prism.                                                            
                                                                                                                                                                                                                                                                         
    encoding is the name of the encoding used to decode or encode the                                                                                      :return: { spectrum-name : ( dst-path, comparison function ) }"""                                             
    file. This should only be used in text mode. The default encoding is                                                                                   _spectra = {}                                                                                                 
    platform dependent, but any encoding supported by Python can be                                                                                        for _spectrum in self.Prism.__dict__:                                                                         
    passed.  See the codecs module for the list of supported encodings.                                                                                        if _spectrum.startswith('_'):                                                                             
                                                                                                                                                                   continue                                                                                              
    errors is an optional string that specifies how encoding errors are to                                                                                     _spectra.setdefault(_spectrum, (f"{self.pallet_folder}/{_spectrum}.txt", getattr(self.Prism, _spectrum))) 
    be handled---this argument should not be used in binary mode. Pass                                                                                     return _spectra                                                                                               
    'strict' to raise a ValueError exception if there is an encoding error                                                                                                                                                                                               
    (the default of None has the same effect), or pass 'ignore' to ignore                                                                              def flush(self) -> None:                                                                                          
    errors. (Note that ignoring encoding errors can lead to data loss.)                                                                                    """Deletes the content of each spectrum file."""                                                              
    See the documentation for codecs.register or run 'help(codecs.Codec)'                                                                                  for _spectrum, item in self._get_spectra_file_func().items():                                                 
    for a list of the permitted encoding error strings.                                                                                                        with open(item[0], "w") as f:                                                                             
                                                                                                                                                                   f.write("")                                                                                           
    newline controls how universal newlines works (it only applies to text                                                                                                                                                                                               
    mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as                                                                                    @staticmethod                                                                                                     
    follows:                                                                                                                                           def rgb_from_row_by_pattern_obj(row: bytes, _name_regex: Pattern[bytes] = compile(b"[\\w ]*\\w")) -> tuple[int, i nt, int, bytes] | None:
                                                                                                                                                           """Returns the rgb values and the name from a table row.                                                      
    * On input, if newline is None, universal newlines mode is                                                                                                                                                                                                           
      enabled. Lines in the input can end in '\n', '\r', or '\r\n', and                                                                                    :return: ( r, g, b, name )"""                                                                                 
      these are translated into '\n' before being returned to the                                                                                          if m := search(b'^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(' + _name_regex.pattern + b')(#|$)', row, _name_regex.fl ags):
      caller. If it is '', universal newline mode is enabled, but line                                                                                         return int(m.group(1)), int(m.group(2)), int(m.group(3)), m.group(4)                                      
      endings are returned to the caller untranslated. If it has any of                                                                                                                                                                                                  
      the _char legal values, input lines are only terminated by the given                                                                             @staticmethod                                                                                                     
      string, and the line ending is returned to the caller untranslated.                                                                              def rgb_from_row(row: bytes, _name_regex: bytes = b"[\\w ]*\\w") -> tuple[int, int, int, bytes] | None:           
                                                                                                                                                           """Returns the rgb values and the name from a table row.                                                      
    * On output, if newline is None, any '\n' characters written are                                                                                                                                                                                                     
      translated to the system default line separator, os.linesep. If                                                                                      :return: ( r, g, b, name )"""                                                                                 
      newline is '' or '\n', no translation takes place. If newline is any                                                                                 if m := search(b'^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(' + _name_regex + b')(#|$)', row):                       
      of the _char legal values, any '\n' characters written are translated                                                                                    return int(m.group(1)), int(m.group(2)), int(m.group(3)), m.group(4)                                      
      to the given string.                                                                                                                                                                                                                                               
                                                                                                                                                       @staticmethod                                                                                                     
    If closefd is False, the underlying file descriptor will be kept open                                                                              def create_rgb_row(r: int, g: int, b: int, _id: bytes) -> bytes:                                                  
    when the file is closed. This does not work when a file name is given                                                                                  """Creates and returns (r, g, b, _id) in table row format."""                                                 
    and must be True in that case.                                                                                                                         return b'%-3d %-3d %-3d    %s\n' % (r, g, b, _id)                                                             
                                                                                                                                                                                                                                                                         
    A custom opener can be used by passing a callable as *opener*. The                                                                                 def refraction(self) -> None:                                                                                     
    underlying file descriptor for the file object is then obtained by                                                                                     """Distributes the values from the source table into files from partial spectra."""                           
    calling *opener* with (*file*, *flags*). *opener* must return an open                                                                                  if not self.src_file:                                                                                         
    file descriptor (passing os.open as *opener* results in functionality                                                                                      raise FileNotFoundError('no source file specified')                                                       
    similar to passing None).                                                                                                                              _spectra_items = self._get_spectra_file_func().items()                                                        
                                                                                                                                                           _spectra_files = {item[0]: open(item[0], "ab") for _, item in _spectra_items}                                 
    open() returns a file object whose type depends on the mode, and                                                                                       with open(self.src_file, "rb") as f:                                                                          
    through which the standard file operations such as reading and writing                                                                                     while ln := f.readline():                                                                                 
    are performed. When open() is used to open a file in a text mode ('w',                                                                                         if rgb_id := self.rgb_from_row(ln):                                                                   
    'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open                                                                                              r, g, b, _id = rgb_id                                                                             
    a file in a binary mode, the returned class varies: in read binary                                                                                                 for _spectrum, item in _spectra_items:                                                            
    mode, it returns a BufferedReader; in write binary and append binary                                                                                                   if item[1](r, g, b):                                                                          
    modes, it returns a BufferedWriter, and in read/write mode, it returns                                                                                                     _spectra_files[item[0]].write(self.create_rgb_row(r, g, b, _id))                          
    a BufferedRandom.                                                                                                                                                          print(1)                                                                                  
                                                                                                                                                           for file in _spectra_files.values():                                                                          
    It is also possible to use a string or bytearray as a file for both                                                                                        file.close()                                                                                              
    reading and writing. For strings StringIO can be used like a file                                                                                                                                                                                                    
    opened in a text mode, and for bytes a BytesIO can be used like a file                                                                             def spectra_headers(self) -> list[str]:                                                                           
    opened in a binary mode.                                                                                                                               """Returns a list of the partial spectra."""                                                                  
    """                                                                                                                                                    return list(self._get_spectra_file_func())                                                                    
    pass                                                                                                                                                                                                                                                                 
                                                                                                                                                       def spectrum(self, header: str) -> list[tuple[int, int, int, bytes]]:                                             
                                                                                                                                                           """Returns all values of a partial spectrum.                                                                  
                                                                                                                                                                                                                                                                         
                                                                                                                                                           :return: [ ( r, g, b, name ), ... ]"""                                                                        
                                                                                                                                                           _spectrum = []                                                                                                
                                                                                                                                                           with open(self._get_spectra_file_func()[header][0], "rb") as f:                                               
                                                                                                                                                               while ln := f.readline():                                                                                 
                                                                                                                                                                   if rgb_id := self.rgb_from_row(ln):                                                                   
                                                                                                                                                                       _spectrum.append(rgb_id)                                                                          
                                                                                                                                                           return _spectrum                                                                                              
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
### EOF ###                                                                                                                                                                                                                                                              
